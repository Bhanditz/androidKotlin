{"name":"Androidkotlin","tagline":"Kotlin extenstion method for better Android development","body":"Android Kotlin Extensions\r\n=========================\r\nA collection of Kotlin extensions for Android,\r\nbased on [KotlinAndroidLib](https://github.com/vladlichonos/kotlinAndroidLib) and [Android Kotlin Extensions](https://github.com/ragunathjawahar/android-kotlin-extensions).\r\n\r\n## Include this library in your project\r\n**Step 1. Add the JitPack repository to your build file**\r\n```groovy\r\nrepositories {\r\n\t    maven {\r\n\t        url \"https://jitpack.io\"\r\n\t    }\r\n\t}\r\n```\r\n**Step 2. Add the dependency in the form**\r\n```groovy\r\ndependencies {\r\n\t        compile 'com.github.yoavst:androidKotlin:v1.0.1'\r\n\t}\r\n```\r\n\r\n\r\n\r\nActivities & Services\r\n-------------------------\r\n#### Example: Start an Activity\r\n**Java**\r\n```java\r\nIntent intent = new Intent(this, SuperPowersActivity.class);\r\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  \r\nintent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\nstartActivity(intent);\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\nval flags = flags(Intent.FLAG_ACTIVITY_NEW_TASK, Intent.FLAG_ACTIVITY_CLEAR_TOP)\r\nstartActivity<SuperPowersActivity>(flags)\r\n```\r\n\r\n#### Example: Create an Intent\r\n**Java**\r\n```java\r\nIntent intent = new Intent(this, SuperPowersActivity.class);\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\nval intent = intent<SuperPowersActivity>()\r\n```\r\n\r\nApi\r\n-------------------------\r\n**Java**\r\n```java\r\nint sdk = Build.VERSION.SDK_INT;\r\nif (sdk >= Build.VERSION_CODES.LOLLIPOP) {}\r\nif (sdk < Build.VERSION_CODES.LOLLIPOP) {}\r\nif (sdk >= Build.VERSION_CODES.KITKAT) {}\r\nif (sdk < Build.VERSION_CODES.KITKAT) {}\r\nif (sdk >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {}\r\nif (sdk < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {}\r\nif (sdk >= X) {}\r\nif (sdk < X) {}\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\nval sdk = currentVersion()\r\nif (lollipopOrNewer()) {}\r\nif (beforeLollipop()) {}\r\nif (kitkatOrNewer()) {}\r\nif (beforeKitkat()) {}\r\nif (icsOrNewer()) {}\r\nif (beforeIcs()) {}\r\nif (versionOrNewer(x)) {}\r\nif (beforeVersion(x)) {}\r\n```\r\n\r\nAsync and main thread\r\n-------------------------\r\n**Kotlin**\r\n```kotlin\r\nasync {\r\n\r\n}\r\n\r\nmainThread {\r\n\r\n}\r\n```\r\n\r\nBroadcast Receiver\r\n-------------------------\r\n**Java**\r\n```java\r\nnew BroadcastReceiver() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onReceive(Context context,Intent intent) {\r\n\t\t\t}\r\n\t\t};\r\n```\r\n**Kotlin**\r\n```kotlin\r\nbroadcastReceiver { context,intent -> }\r\n```\r\n\r\nLayout Inflation\r\n-------------------------\r\n**Java**\r\n````java\r\nLayoutInflater layoutInflater = LayoutInflater.from(this);\r\nView awesomeView = layoutInflater.inflate(R.layout.my_awesome_layout, null);\r\n````\r\n\r\n**Kotlin**\r\n````kotlin\r\nval awesomeView = inflateLayout(R.layout.my_awesome_layout)\r\n````\r\n\r\nLogs\r\n-------------------------\r\n#### Example: Logging\r\n**Java**\r\n```java\r\nString tag = this.getClass().getName();\r\nLog.i(tag, \"Howdy! Info\");\r\nLog.d(tag, \"Knock knock! Debug\");\r\nLog.e(tag, \"Grim, Error\");\r\nLog.wtf(tag, \"Damn! WTF\"); // Nope, not what you think. Refer the docs :P\r\n```\r\n\r\n**Kotlin**\r\n\r\n```kotlin\r\ni(\"Howdy! Info\")\r\nd(\"Knock knock! Debug\")\r\ne(\"Grim, Error\")\r\nwtf(\"Damn! WTF\")\r\n```\r\n\r\nPreferences\r\n-------------------------\r\n#### Example: Single Preference\r\n**Java**\r\n```java\r\nSharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);\r\nEditor editor = preferences.edit();\r\neditor.putBoolean(\"KEY_WALKTHROUGH_COMPLETE\", complete);\r\nif (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {\r\n  editor.commit();\r\n} else {\r\n  editor.apply();\r\n}\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\ngetDefaultSharedPreferences().putBoolean(\"KEY_WALKTHROUGH_COMPLETE\", complete)\r\n```\r\n\r\n#### Example: Bulk Preferences\r\n**Kotlin**\r\n```kotlin\r\ngetDefaultSharedPreferences()\r\n  .bulk()\r\n  .putBoolean(\"KEY_WALKTHROUGH_COMPLETE\", complete)\r\n  .putString(\"KEY_LAST_USED\", lastUsedIso8601Date)\r\n  .applyBulk()\r\n```\r\n\r\nToasts\r\n-------------------------\r\n#### Example: Short Message\r\n**Java**\r\n```java\r\nToast.makeText(this, R.string.welcome, Toast.LENGTH_SHORT).show();\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\ntoast(R.string.welcome)\r\n```\r\n\r\n#### Example: Long Message\r\n**Java**\r\n```java\r\nToast.makeText(this, R.string.welcome, Toast.LENGTH_LONG).show();\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\nlongToast(R.string.welcome)\r\n```\r\n\r\nSystem Services\r\n-------------------------\r\n#### Example: System service on code\r\n\r\n**Java**\r\n```java\r\nAlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\r\nNotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\nval alarmManager = context.alarmManager()\r\nval notificationManager = context.notificationManager()\r\n```\r\n\r\n#### Example: System service field (lazy)\r\n**Java**\r\n```java\r\nAlarmManager alarmManager;\r\nNotificationManager notificationManager;\r\npublic void onCreate(Bundle savedInstanceState)\r\n{\r\n        super.onCreate(savedInstanceState);\r\n        alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);\r\n        notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\r\n}\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\nval alarmManager: AlarmManager by systemService()\r\nval notificationManager: NotificationManager by systemService()\r\n```\r\n\r\nResources\r\n-------------------------\r\n#### Example: Typeface from Assets\r\n**Java**\r\n```java\r\nAssetManager assetManager = getAssets();\r\nTypeface sourceSansPro = Typeface.createFromAsset(assetManager, \"fonts/source-sans-pro.ttf\");\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\nval sourceSansPro = typefaceFromAssets(\"fonts/source-sans-pro.ttf\")\r\n```\r\n\r\n#### Example: Get resources\r\n**Java**\r\n```java\r\nint number = getResources().getInteger(R.integer.number);\r\nint dimenPixelSize = getResources().getDimensionPixelSize(R.dimen.size);\r\nint color = getResources().getColor(R.color.red);\r\nint[] intArray = getResources().getIntArray(R.array.ids);\r\nString[] stringArray = getResources().getColor(R.array.options);\r\nDrawable drawable = getResources().getDrawable(R.drawable.background);\r\n```\r\n\r\n**Kotlin**\r\n```kotlin\r\nval number = intRes(R.integer.number)\r\nval dimenPixelSize = dimenRes(R.dimen.size)\r\nval color = colorRes(R.color.red)\r\nval intArray = intArrayRes(R.array.ids)\r\nval stringArray = stringArrayRes(R.array.options)\r\nval drawable = drawableRes(R.drawable.background)\r\n```\r\n\r\n#### Example: Get resources as field (lazy)\r\n**Kotlin**\r\n```kotlin\r\nval text by stringResource(R.string.text)\r\nval number by intResource(R.integer.number)\r\nval dimenPixelSize by dimenResource(R.dimen.size)\r\nval color by colorResource(R.color.red)\r\nval intArray by intArrayResource(R.array.ids)\r\nval stringArray by stringArrayResource(R.array.options)\r\nval drawable by drawableResource(R.drawable.background)\r\n```\r\n\r\nMore...\r\n-------------------------\r\nMore extensions under development.\r\n\r\nLicense\r\n-------------------------\r\n    Copyright 2015 Yoav sternberg\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}